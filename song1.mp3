<!DOCTYPE html>
<html lang="my">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" />
<title>FM Radio autoDJ Playlist</title>
<style>
  @import url('https://fonts.googleapis.com/css2?family=Moulpali&display=swap');
  @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&display=swap');

  /* Reset & base */
  * {
    box-sizing: border-box;
  }
  body {
    margin: 0;
    font-family: 'Moulpali', 'Montserrat', sans-serif;
    background: linear-gradient(135deg, #1e3c72, #2a5298);
    color: #f0f0f0;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  header {
    padding: 1rem 1.5rem;
    width: 100%;
    max-width: 350px;
    background: rgba(0, 0, 0, 0.5);
    border-bottom: 3px solid #ff3377;
    text-align: center;
    user-select: none;
  }
  header h1 {
    margin: 0;
    font-weight: 700;
    font-size: 1.6rem;
    letter-spacing: 2px;
    color: #ff66aa;
  }
  header p {
    margin: 0.3rem 0 0 0;
    font-weight: 400;
    font-size: 0.95rem;
    color: #ffa0c9;
  }

  main {
    flex-grow: 1;
    width: 100%;
    max-width: 350px;
    padding: 1rem 1rem 1.5rem;
    display: flex;
    flex-direction: column;
    background: rgba(0,0,0,0.35);
    border-radius: 12px;
    margin-top: 1rem;
  }
  /* Headings */
  main h2 {
    color: #ff66aa;
    margin-bottom: 0.8rem;
    font-weight: 700;
    user-select: none;
    border-left: 4px solid #ff3377;
    padding-left: 0.6rem;
  }

  /* Playlist */
  #playlist {
    list-style: none;
    padding: 0;
    margin: 0 0 1rem 0;
    max-height: 260px;
    overflow-y: auto;
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 8px;
    background: #222a44;
    -webkit-overflow-scrolling: touch;
  }
  #playlist li {
    padding: 0.7rem 1rem;
    border-bottom: 1px solid rgba(255,255,255,0.15);
    cursor: pointer;
    color: #ddd;
    display: grid;
    grid-template-columns: 30px 1fr 1fr;
    gap: 0.5rem;
    align-items: center;
    transition: background 0.3s ease, color 0.3s ease;
    font-size: 0.92rem;
  }
  #playlist li:last-child {
    border-bottom: none;
  }
  #playlist li:hover {
    background: #ff3377;
    color: white;
  }
  #playlist li.playing {
    background: #ff66aa;
    color: #000;
    font-weight: 700;
  }
  #playlist li .track-number {
    font-weight: 700;
    text-align: center;
  }
  #playlist li .track-title {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
  }
  #playlist li .track-artist {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    font-style: italic;
    font-size: 0.85rem;
    color: #ffb0d4;
  }

  /* Player controls */
  #player-controls {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 1.2rem;
    margin-bottom: 1rem;
  }
  button.control-btn {
    background: #ff3377;
    border: none;
    border-radius: 50%;
    width: 44px;
    height: 44px;
    color: white;
    font-size: 20px;
    font-weight: 700;
    line-height: 1;
    cursor: pointer;
    box-shadow: 0 4px 14px rgba(255,51,119,0.55);
    transition: background 0.25s ease;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  button.control-btn:active {
    background: #d1225b;
  }
  button.control-btn[disabled] {
    background: #666;
    cursor: not-allowed;
    box-shadow: none;
  }

  /* Progress bar */
  #progress-container {
    position: relative;
    width: 100%;
    height: 18px;
    background: #444c78;
    border-radius: 12px;
    overflow: hidden;
    cursor: pointer;
  }
  #progress {
    background: #ff66aa;
    height: 100%;
    width: 0%;
    transition: width 0.1s linear;
  }
  #time {
    margin-top: 6px;
    text-align: center;
    font-size: 0.85rem;
    color: #ffa0c9;
    font-variant-numeric: tabular-nums;
    user-select: none;
  }

  /* Footer */
  footer {
    margin-top: 1rem;
    font-size: 0.85rem;
    color: #ffa0c9;
    text-align: center;
    user-select: none;
  }

  /* Scrollbar styling for playlist */
  #playlist::-webkit-scrollbar {
    width: 6px;
  }
  #playlist::-webkit-scrollbar-track {
    background: #1c2640;
  }
  #playlist::-webkit-scrollbar-thumb {
    background: #ff3380;
    border-radius: 3px;
  }

  /* Responsive text sizes */
  @media (max-width: 400px) {
    header h1 {
      font-size: 1.3rem;
    }
    #playlist li {
      padding: 0.6rem 0.8rem;
      font-size: 0.88rem;
      grid-template-columns: 28px 1fr 1fr;
    }
    button.control-btn {
      width: 36px;
      height: 36px;
      font-size: 18px;
    }
    #time {
      font-size: 0.75rem;
    }
  }

</style>
</head>
<body>
  <header>
    <h1>FM AutoDJ ရေဒီယို</h1>
    <p>Auto DJ MP3 Playlist</p>
  </header>
  <main>
    <h2>Today's Playlist</h2>
    <ul id="playlist" aria-label="ယနေ့၏ သီချင်းစာရင်း"></ul>
    <div id="player-controls">
      <button id="prevBtn" class="control-btn" aria-label="အရင် သီချင်း">&#9664;&#9664;</button>
      <button id="playPauseBtn" class="control-btn" aria-label="ကစားရန် သို့မဟုတ် ရပ်တန့်ရန်">&#9658;</button>
      <button id="nextBtn" class="control-btn" aria-label="နောက် သီချင်း">&#9654;&#9654;</button>
    </div>
    <div id="progress-container" aria-label="တေးမြေပုံတိုးချဲ့ပမာဏ" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0" tabindex="0">
      <div id="progress"></div>
    </div>
    <div id="time" aria-live="polite" aria-atomic="true">00:00 / 00:00</div>

    <h2>အစီအစဉ် အချိန်ဇယား (Program Schedule)</h2>
    <section id="program-schedule" style="color:#f0c4d9; font-size: 0.9rem; line-height:1.3; user-select:none;">
      <p><strong>နံနက် ၅း၀၀ - ၁၂း၀၀</strong> - ဖန်တီးမှုပြ၊ နေ့စဉ် သီချင်းနှင့် သတင်းများ</p>
      <p><strong>မွန်းလွဲ ၁၂း၀၀ - ၃း၀၀</strong> - သတင်းနှင့် ပြဇာတ်များ</p>
      <p><strong>နေ့လည် ၃း၀၀ - ၆း၀၀</strong> - ရှားပါးသံစဉ်များနှင့် အနုပညာရှင်တွေ ပြောကြားခြင်း</p>
      <p><strong>ညနေ ၆း၀၀ - ၉း၀၀</strong> - တေးဂီတ အထူးအစီအစဉ်</p>
      <p><strong>ည ၉း၀၀ - ၁၂း၀၀</strong> - ဖန်တီးမှု ဂီတ နှင့် အတေးများ</p>
    </section>
  </main>
  <footer>© 2024 FM AutoDJ ရေဒီယို</footer>

  <script>
    (function(){
      // Example playlist using GitHub raw URLs to mp3 files - replace YOUR_USERNAME and REPO_NAME and path accordingly
      const playlist = [
        {
          title: "song1.mp3",
          artist: "John sai moon",
          src: "https://raw.githubusercontent.com/upanna/upanna.github.io/main/mp3/song1.mp3"
        },
        {
          title: "song2.mp3",
          artist: "Ma Nyein Ei Ei Htwe",
          src: "https://raw.githubusercontent.com/upanna/upanna.github.io/main/mp3/song2.mp3"
        },
        {
          title: "song3.mp3",
          artist: "Aung Kaung",
          src: "https://raw.githubusercontent.com/upanna/upanna.github.io/main/mp3/song3.mp3"
        }
      ];

      const playlistEl = document.getElementById('playlist');
      const playPauseBtn = document.getElementById('playPauseBtn');
      const prevBtn = document.getElementById('prevBtn');
      const nextBtn = document.getElementById('nextBtn');
      const progressContainer = document.getElementById('progress-container');
      const progress = document.getElementById('progress');
      const timeEl = document.getElementById('time');

      const audio = new Audio();
      let currentIndex = 0;
      let isPlaying = false;

      // Build playlist UI with details
      function buildPlaylist() {
        playlist.forEach((track, i) => {
          const li = document.createElement('li');
          li.setAttribute('tabindex', '0');
          li.dataset.index = i;
          li.innerHTML =
            '<span class="track-number">' + (i + 1) + '</span>' +
            '<span class="track-title">' + track.title + '</span>' +
            '<span class="track-artist">' + track.artist + '</span>';
          li.addEventListener('click', () => {
            loadTrack(i);
            playAudio();
          });
          li.addEventListener('keydown', (e) => {
            if(e.key === 'Enter' || e.key === ' ') {
              e.preventDefault();
              loadTrack(i);
              playAudio();
            }
          });
          playlistEl.appendChild(li);
        });
      }

      function loadTrack(index) {
        if(index < 0) index = playlist.length - 1;
        else if(index >= playlist.length) index = 0;
        currentIndex = index;
        audio.src = playlist[index].src;
        audio.load();
        updatePlaylistUI();
        updateTime(0, 0);
        progress.style.width = '0%';
      }

      function playAudio() {
        audio.play();
        isPlaying = true;
        updatePlayPauseButton();
        updatePlaylistUI();
      }

      function pauseAudio() {
        audio.pause();
        isPlaying = false;
        updatePlayPauseButton();
      }

      function togglePlayPause() {
        if(isPlaying) pauseAudio();
        else playAudio();
      }

      function nextTrack() {
        loadTrack(currentIndex + 1);
        playAudio();
      }

      function prevTrack() {
        loadTrack(currentIndex - 1);
        playAudio();
      }

      function updatePlaylistUI() {
        const lis = playlistEl.querySelectorAll('li');
        lis.forEach(li => li.classList.remove('playing'));
        const currentLi = playlistEl.querySelector('li[data-index="'+currentIndex+'"]');
        if(currentLi) currentLi.classList.add('playing');
      }

      function formatTime(seconds) {
        let m = Math.floor(seconds / 60);
        let s = Math.floor(seconds % 60);
        return (m < 10 ? '0'+m : m) + ':' + (s < 10 ? '0'+s : s);
      }

      function updateTime(current, duration) {
        timeEl.textContent = formatTime(current) + ' / ' + formatTime(duration);
      }

      audio.addEventListener('timeupdate', () => {
        if(audio.duration) {
          const percent = (audio.currentTime / audio.duration) * 100;
          progress.style.width = percent + '%';
          updateTime(audio.currentTime, audio.duration);

          if(progressContainer){
            progressContainer.setAttribute('aria-valuenow', Math.floor(percent));
          }
        }
      });

      audio.addEventListener('ended', () => {
        nextTrack();
      });

      playPauseBtn.addEventListener('click', togglePlayPause);
      prevBtn.addEventListener('click', prevTrack);
      nextBtn.addEventListener('click', nextTrack);

      progressContainer.addEventListener('click', (e) => {
        const rect = progressContainer.getBoundingClientRect();
        const clickX = e.clientX - rect.left;
        const width = rect.width;
        if(audio.duration){
          audio.currentTime = (clickX / width) * audio.duration;
        }
      });

      progressContainer.addEventListener('keydown', (e) => {
        if(audio.duration){
          let step = audio.duration * 0.05;
          if(e.key === 'ArrowLeft'){
            e.preventDefault();
            audio.currentTime = Math.max(0, audio.currentTime - step);
          } else if(e.key === 'ArrowRight'){
            e.preventDefault();
            audio.currentTime = Math.min(audio.duration, audio.currentTime + step);
          }
        }
      });

      buildPlaylist();
      loadTrack(0);
    })();
  </script>
</body>
</html>
</content>
</create_file>
